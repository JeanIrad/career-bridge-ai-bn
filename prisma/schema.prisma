generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
  PROFESSOR
  ALUMNI
  EMPLOYER
  MENTOR
  UNIVERSITY_STAFF
  OTHER
  SUPER_ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  BANNED
}

enum TwoFactorMethod {
  APP
  SMS
  EMAIL
  NONE
}

// Removed old enums - replaced with comprehensive ones below

model User {
  id             String           @id @default(uuid())
  email           String           @unique
  password        String
  universityId    String?  @unique
  studentId       String?  @unique  // Student ID for verification
  isVerified      Boolean          @default(false)
  accountStatus   AccountStatus    @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLogin       DateTime?
  role            UserRole         @default(STUDENT)
  firstName       String
  lastName        String
  phoneNumber     String? @unique
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  dateOfBirth     DateTime?
  gender          Gender? @default(OTHER)
  nationality     String?
  languages       String[]
  skills          Skill[]
  interests       String[]
  gpa             Float?           // GPA for filtering
  graduationYear  Int?             // Graduation year for filtering
  availability    String?          // Job availability status
  university      String?          // University name
  major           String?          // Major for filtering
  // profile         Profile?
  posts           Post[]
  events          Event[]
  deletedAt       DateTime? 
  jobApplications JobApplication[]
  companies       Company[]
  postedJobs      Job[]            @relation("PostedJobs")
  notifications   Notification[]
  eventRegistrations EventRegistration[]
  chats              Chat[]
  comments          Comment[]
  education         Education[]
  experiences       Experience[]
  resume            String?
  headline          String?
  bio               String?
  avatar            String?
  socialLinks       Json?
  visibility        Visibility   @default(PUBLIC)
  isPublic          Boolean      @default(true)
  
  // ChatGroup relations
  ownedGroups       ChatGroup[]  @relation("GroupOwner")
  groupMemberships  ChatGroup[]  @relation("GroupMembers")
  groupMessages     GroupMessage[]

  // Enhanced Auth relations
  userSessions      UserSession[]
  twoFactorAuth     TwoFactorAuth?
  backupCodes       BackupCode[]
  securityLogs      SecurityLog[]
  trustedDevices    TrustedDevice[]
  jobRecommendations JobRecommendation[]
  // Document uploads
  documents         Document[]
  passwordResetTokens PasswordResetToken[]
  
  // Content Moderation relations
  authoredModerationRequests   ModerationRequest[] @relation("ModerationAuthor")
  reportedModerationRequests   ModerationRequest[] @relation("ModerationReporter")
  moderatedRequests            ModerationRequest[] @relation("ModerationModerator")
  
  // Company Review relations
  companyReviews               CompanyReview[]

  // Message relations
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // New relations
  status               UserStatus  @default(ACTIVE)
  emailVerified        Boolean     @default(false)
  phoneVerified        Boolean     @default(false)
  twoFactorEnabled     Boolean     @default(false)
  lastActive           DateTime?

  // Relations
  universityPartnerships UniversityPartnership[]

  @@map("users")
}
model JobRecommendation {
  id        String   @id @default(uuid())
  userId    String
  jobId     String
  score     Float    // AI confidence score (0-1)
  reasons   Json?    // JSON array of matching reasons
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
  
  @@unique([userId, jobId])
}
// Enhanced Authentication Models
model VerificationCode {
  id        String   @id @default(uuid())
  email     String
  code      String?  // Optional for backward compatibility
  token     String?  // New: verification token for links
  type      String   // 'email_verification', 'password_reset', 'two_factor', 'account_reactivation'
  expiresAt DateTime
  attempts  Int      @default(0)
  isUsed    Boolean  @default(false) // New: track if token has been used
  createdAt DateTime @default(now())

  @@unique([email, type])
  @@unique([token]) // Ensure tokens are unique
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String?  @unique
  deviceName   String?
  deviceId     String?
  ipAddress    String?
  userAgent    String?
  location     String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  expiresAt    DateTime?

  @@index([userId])
}

model TwoFactorAuth {
  id          String  @id @default(uuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret      String  // TOTP secret
  isConfirmed Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BackupCode {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String   // Hashed backup code
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}

model AccountLockout {
  id                String    @id @default(uuid())
  email             String    @unique
  failedAttempts    Int       @default(0)
  lastFailedAttempt DateTime?
  lockedUntil       DateTime?
  ipAddress         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model SecurityLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     String   // 'LOGIN_SUCCESS', 'LOGIN_FAILED', 'PASSWORD_CHANGED', etc.
  ipAddress String?
  userAgent String?
  metadata  Json?    // Additional event data
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
  @@index([event, timestamp])
}

model TrustedDevice {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId    String   @unique
  deviceName  String
  deviceType  String   // 'mobile', 'desktop', 'tablet'
  fingerprint String   // Device fingerprint hash
  isActive    Boolean  @default(true)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([userId])
}

model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  password  String   // Hashed password
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model LoginAttempt {
  id         String   @id @default(uuid())
  email      String
  ipAddress  String?
  userAgent  String?
  success    Boolean
  failReason String?  // Reason for failure if unsuccessful
  timestamp  DateTime @default(now())

  @@index([email, timestamp])
  @@index([ipAddress, timestamp])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // 'PASSWORD_RESET', 'PASSWORD_SETUP'
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model Education {
  id          String   @id @default(uuid())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  activities  String[]
  user     User  @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Experience {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  location    String
  skills      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user     User  @relation(fields: [userId], references: [id])
  userId   String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  deletedAt DateTime?
}

model Skill {
  id          String   @id @default(uuid())
  name        String
  endorsements Int?
  user     User  @relation(fields: [userId], references: [id])
  userId   String
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          String         @id @default(uuid())
  name        String
  description String
  logo        String?
  website     String?
  industry    String
  size        String
  isVerified  Boolean        @default(false)
  owner       User           @relation(fields: [ownerId], references: [id])
  ownerId     String
  jobs        Job[]
  experiences Experience[]
  locations   CompanyLocation[]
  reviews     CompanyReview[]
  documents   Document[]     @relation("CompanyDocuments")
  
  // Enhanced company fields
  type        String?        // "Private", "Public", "Non-profit", etc.
  foundedYear Int?
  specializations String[]
  phone       String?
  email       String?
  linkedIn    String?
  twitter     String?
  facebook    String?
  
  // Verification fields
  verificationStatus VerificationStatus @default(PENDING)
  verificationNotes  String?
  verifiedAt         DateTime?
  verifiedBy         String?
  
  // University partnerships
  universityPartnerships UniversityPartnership[]
  
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add new relations
  campusEvents          CampusEvent[]
}

model CompanyLocation {
  id          String   @id @default(uuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Location details
  address     String?
  city        String
  state       String?
  country     String
  zipCode     String?
  countryCode String?  // ISO country code (US, CA, etc.)
  
  // Location metadata
  isHeadquarters Boolean @default(false)
  locationType   String? // "headquarters", "branch", "remote", etc.
  timezone       String?
  
  // IP-based detection metadata
  detectedFromIp Boolean @default(false)
  ipAddress      String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  @@index([companyId])
  @@index([country, city])
}

model Job {
  id                  String            @id @default(uuid())
  title              String
  description        String
  requirements       String[]
  type              String
  location          String
  salary            Json
  applicationDeadline DateTime
  status            JobStatus          @default(ACTIVE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         String
  postedBy          User               @relation("PostedJobs", fields: [postedById], references: [id])
  postedById        String
  applications      JobApplication[]
  deletedAt DateTime?
  jobRecommendations JobRecommendation[]
}

model JobApplication {
  id          String            @id @default(uuid())
  resumeUrl   String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  feedback    String?
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  job         Job               @relation(fields: [jobId], references: [id])
  jobId       String
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  deletedAt DateTime?
  createdAt DateTime @default(now())
  
  // New relations
  interviews  Interview[]
  source      String?           // Source of application (direct, referral, job_board, etc.)
}

model Interview {
  id              String           @id @default(uuid())
  applicationId   String
  interviewType   InterviewType
  scheduledAt     DateTime
  duration        Int?             // Duration in minutes
  status          InterviewStatus  @default(SCHEDULED)
  notes           String?
  feedback        String?
  rating          Int?             // 1-5 rating
  interviewerIds  String[]         // Array of interviewer user IDs
  meetingLink     String?
  location        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  completedAt     DateTime?
  
  // Relations
  application     JobApplication   @relation(fields: [applicationId], references: [id])
  
  @@index([applicationId])
  @@index([scheduledAt])
  @@index([status])
}

model CandidateSource {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SkillInDemand {
  id              String   @id @default(uuid())
  skillName       String   @unique
  demandCount     Int      @default(0)
  growthPercent   Float    @default(0)
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CompanyReview {
  id          String   @id @default(uuid())
  companyId   String
  reviewerId  String
  rating      Int      // 1-5 rating
  title       String?
  content     String
  pros        String?
  cons        String?
  isAnonymous Boolean  @default(false)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  reviewer    User     @relation(fields: [reviewerId], references: [id])
  
  @@index([companyId])
  @@index([reviewerId])
  @@index([rating])
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String
  tags        String[]
  attachments String[]
  likes       Int        @default(0)
  views       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  forum       Forum      @relation(fields: [forumId], references: [id])
  forumId     String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  comments    Comment[]
  deletedAt DateTime?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user User @relation(fields: [userId], references: [id])
  userId String
  deletedAt DateTime?

}

model Forum {
  id          String   @id @default(uuid())
  name        String
  description String
  category    String
  moderators  String[]
  posts       Post[]
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                   String             @id @default(uuid())
  title               String
  description         String
  type               String
  startDate          DateTime
  endDate            DateTime
  location           String
  mode               EventMode
  capacity           Int
  registrationDeadline DateTime
  status             EventStatus         @default(UPCOMING)
  creator            User                @relation(fields: [creatorId], references: [id])
  creatorId          String
  registrations      EventRegistration[]
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventRegistration {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  updatedAt DateTime @updatedAt
  User User[]
}

model Chat {
  id           String    @id @default(uuid())
  type         String
  participants String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  deletedAt DateTime?
}

model Message {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chat        Chat      @relation(fields: [chatId], references: [id])
  chatId      String
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User      @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String
  status      MessageStatus @default(SENT)
  readAt      DateTime?
  deliveredAt DateTime?
  metadata    Json?     // For additional message data (typing, reactions, etc.)
  attachments String[]  // URLs to any attached files
  replyTo     Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replyToId   String?
  replies     Message[] @relation("MessageReplies")
  isEdited    Boolean   @default(false)
  editHistory Json?     // Track message edit history
  deletedAt   DateTime?

  @@index([senderId])
  @@index([recipientId])
  @@index([chatId])
  @@index([createdAt])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      String
  priority  String?  @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  link      String?
  metadata  Json?    // Additional data for the notification
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  deletedAt DateTime?
  updatedAt DateTime @updatedAt
  
  @@index([userId, read])
  @@index([userId, type])
  @@index([createdAt])
}
model ChatGroup {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isActive    Boolean        @default(true)
  
  // Relations
  members     User[]         @relation("GroupMembers")
  owner       User           @relation("GroupOwner", fields: [ownerId], references: [id])
  ownerId     String
  messages    GroupMessage[]
  deletedAt   DateTime?
}

model GroupMessage {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isEdited  Boolean   @default(false)
  
  // Relations
  group     ChatGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  sender    User      @relation(fields: [senderId], references: [id])
  senderId  String
  deletedAt DateTime?
}

enum Visibility {
  PUBLIC
  PRIVATE
  CONNECTIONS
}

enum JobStatus {
  ACTIVE
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  INTERVIEWED
  ACCEPTED
  REJECTED
}

enum EventMode {
  ONLINE
  OFFLINE
  HYBRID
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

model Document {
  id                  String             @id @default(uuid())
  userId              String
  companyId           String?            // Optional relation to company
  documentType        DocumentType
  originalName        String
  cloudinaryPublicId  String
  cloudinaryUrl       String
  fileSize            Int
  mimeType            String
  uploadedAt          DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  isVerified          Boolean            @default(false)
  verificationStatus  VerificationStatus @default(PENDING)
  verificationNotes   String?
  verifiedAt          DateTime?
  verifiedBy          String?
  deletedAt           DateTime?
  createdAt           DateTime           @default(now())
  // Relations
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  company             Company?           @relation("CompanyDocuments", fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([companyId])
  @@index([documentType])
  @@index([verificationStatus])
}

enum DocumentType {
  RESUME
  DEGREE_CERTIFICATE
  TRANSCRIPT
  ID_DOCUMENT
  BUSINESS_LICENSE
  COMPANY_REGISTRATION
  PORTFOLIO
  COVER_LETTER
  RECOMMENDATION_LETTER
  COMPANY_LOGO
  PROFILE_PICTURE
  OTHER
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_RESUBMISSION
}

// Content Moderation Enums
enum ContentType {
  POST
  COMMENT
  MESSAGE
  PROFILE
  DOCUMENT
  IMAGE
  VIDEO
  JOB_POSTING
  COMPANY_DESCRIPTION
  USER_BIO
  REVIEW
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
  UNDER_REVIEW
  AUTO_APPROVED
  AUTO_REJECTED
}

enum ViolationType {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE_CONTENT
  COPYRIGHT_VIOLATION
  FAKE_INFORMATION
  VIOLENCE
  ADULT_CONTENT
  DISCRIMINATION
  SCAM
  OFF_TOPIC
  DUPLICATE_CONTENT
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Content Moderation Models
model ModerationRequest {
  id              String            @id @default(uuid())
  contentType     ContentType
  contentId       String
  content         String
  authorId        String?
  reporterId      String?
  status          ModerationStatus  @default(PENDING)
  severity        SeverityLevel     @default(LOW)
  violationTypes  ViolationType[]
  moderatorId     String?
  moderatorNotes  String?
  reason          String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  resolvedAt      DateTime?
  
  // Relations
  author          User?             @relation("ModerationAuthor", fields: [authorId], references: [id])
  reporter        User?             @relation("ModerationReporter", fields: [reporterId], references: [id])
  moderator       User?             @relation("ModerationModerator", fields: [moderatorId], references: [id])
  
  @@index([status])
  @@index([contentType])
  @@index([severity])
  @@index([createdAt])
  @@index([authorId])
  @@index([moderatorId])
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
  PHONE_SCREENING
  TECHNICAL
  BEHAVIORAL
  PANEL
  FINAL
  HR
  CODING_CHALLENGE
  CASE_STUDY
  PRESENTATION
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

// New models for university partnerships
model University {
  id                String   @id @default(cuid())
  name              String   @unique
  shortName         String?  // e.g., "MIT", "Stanford"
  description       String?
  website           String?
  email             String?
  phone             String?
  
  // Location information
  address           String?
  city              String
  state             String?
  country           String
  zipCode           String?
  timezone          String?
  
  // University details
  type              UniversityType @default(PUBLIC)
  accreditation     String?
  establishedYear   Int?
  studentCount      Int?
  facultyCount      Int?
  
  // Rankings and recognition
  worldRanking      Int?
  nationalRanking   Int?
  isTopTier         Boolean @default(false)
  
  // Visual and branding
  logo              String?
  banner            String?
  colors            Json?    // Brand colors
  
  // Academic information
  departments       String[] // Array of department names
  popularMajors     String[] // Most popular majors
  graduationRate    Float?   // Percentage
  employmentRate    Float?   // Post-graduation employment rate
  
  // Partnership readiness
  isPartnershipReady Boolean @default(false)
  partnershipEmail   String? // Dedicated email for partnerships
  partnershipContact String? // Contact person name
  
  // Metadata
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  partnerships      UniversityPartnership[]
  campusEvents      CampusEvent[]
  
  @@index([country, city])
  @@index([type])
  @@index([isPartnershipReady])
  @@map("universities")
}

// Old models removed - replaced with CampusEvent model

// Update UniversityPartnership model to include relations and metrics
model UniversityPartnership {
  id                    String                @id @default(cuid())
  
  // Partnership basics
  title                 String                // Partnership name/title
  description           String?
  status                PartnershipStatus     @default(PENDING)
  priority              PartnershipPriority   @default(MEDIUM)
  
  // Timeline
  startDate             DateTime?
  endDate               DateTime?
  renewalDate           DateTime?
  isRenewable           Boolean               @default(true)
  
  // Partnership scope and goals
  partnershipType       PartnershipType[]     // Multiple types possible
  targetStudentYear     StudentYear[]         // Freshman, Sophomore, etc.
  targetMajors          String[]              // Specific majors of interest
  targetSkills          String[]              // Required/preferred skills
  
  // Hiring goals and metrics
  annualHiringGoal      Int                   @default(0)
  internshipGoal        Int                   @default(0)
  coopGoal              Int                   @default(0) // Co-op positions
  entryLevelGoal        Int                   @default(0)
  
  // Actual metrics (tracked)
  studentsHired         Int                   @default(0)
  internsHired          Int                   @default(0)
  coopStudentsHired     Int                   @default(0)
  applicationsReceived  Int                   @default(0)
  
  // Benefits offered to university
  benefits              Json?                 // Structured benefits data
  scholarshipAmount     Float?                // Annual scholarship commitment
  equipmentDonation     String?               // Lab equipment, software licenses
  guestLectures         Boolean               @default(false)
  industryProjects      Boolean               @default(false)
  researchCollaboration Boolean               @default(false)
  
  // Requirements from university
  requirements          Json?                 // Structured requirements
  exclusiveAccess       Boolean               @default(false)
  minimumGPA            Float?
  requiredCertifications String[]
  
  // Contact information
  companyContactName    String?
  companyContactEmail   String?
  companyContactPhone   String?
  universityContactName String?
  universityContactEmail String?
  
  // Partnership activities
  campusRecruitment     Boolean               @default(true)
  virtualRecruitment    Boolean               @default(true)
  careerFairs           Boolean               @default(true)
  infoSessions          Boolean               @default(true)
  networkingEvents      Boolean               @default(true)
  
  // Financial terms
  partnershipFee        Float?                // Annual fee if any
  recruitmentFee        Float?                // Per hire fee
  currency              String                @default("USD")
  
  // Performance metrics
  avgTimeToHire         Int?                  // Days
  retentionRate         Float?                // Percentage of hires still with company
  satisfactionScore     Float?                // University satisfaction (1-5)
  
  // Legal and compliance
  contractSigned        Boolean               @default(false)
  contractUrl           String?               // Link to signed contract
  complianceNotes       String?
  
  // Metadata
  lastActivityDate      DateTime?
  notes                 String?               // Internal notes
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relations
  universityId          String
  university            University            @relation(fields: [universityId], references: [id], onDelete: Cascade)
  companyId             String
  company               Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdById           String                // User who created the partnership
  createdBy             User                  @relation(fields: [createdById], references: [id])
  
  // Related activities
  campusEvents          CampusEvent[]
  recruitmentCampaigns  RecruitmentCampaign[]
  
  @@unique([universityId, companyId]) // One partnership per university-company pair
  @@index([status])
  @@index([partnershipType])
  @@index([priority])
  @@index([startDate, endDate])
  @@map("university_partnerships")
}

// Campus events and activities
model CampusEvent {
  id                String              @id @default(cuid())
  title             String
  description       String?
  type              CampusEventType
  status            EventStatus         @default(UPCOMING)
  
  // Event details
  startDateTime     DateTime
  endDateTime       DateTime
  timezone          String?
  location          String?
  isVirtual         Boolean             @default(false)
  meetingLink       String?
  capacity          Int?
  registrationCount Int                 @default(0)
  
  // Event metadata
  isPublic          Boolean             @default(true)
  requiresRSVP      Boolean             @default(true)
  rsvpDeadline      DateTime?
  
  // Relations
  universityId      String?
  university        University?         @relation(fields: [universityId], references: [id])
  partnershipId     String?
  partnership       UniversityPartnership? @relation(fields: [partnershipId], references: [id])
  companyId         String
  company           Company             @relation(fields: [companyId], references: [id])
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@index([type, startDateTime])
  @@index([universityId])
  @@index([companyId])
  @@map("campus_events")
}

// Recruitment campaigns for tracking
model RecruitmentCampaign {
  id                String                @id @default(cuid())
  name              String
  description       String?
  status            CampaignStatus        @default(ACTIVE)
  
  // Campaign details
  startDate         DateTime
  endDate           DateTime
  budget            Float?
  targetHires       Int                   @default(0)
  actualHires       Int                   @default(0)
  
  // Targeting
  targetMajors      String[]
  targetGradYear    Int[]
  targetSkills      String[]
  
  // Relations
  partnershipId     String
  partnership       UniversityPartnership @relation(fields: [partnershipId], references: [id])
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@index([status])
  @@index([startDate, endDate])
  @@map("recruitment_campaigns")
}

// Enums for the university partnership system
enum UniversityType {
  PUBLIC
  PRIVATE
  COMMUNITY_COLLEGE
  TECHNICAL_SCHOOL
  RESEARCH_UNIVERSITY
  LIBERAL_ARTS
  HISTORICALLY_BLACK
  WOMEN_COLLEGE
  RELIGIOUS
  MILITARY
  ONLINE
  FOR_PROFIT
}

enum PartnershipStatus {
  DRAFT           // Being prepared
  PENDING         // Awaiting university approval
  UNDER_REVIEW    // Being reviewed by university
  APPROVED        // Approved by university
  ACTIVE          // Currently active
  PAUSED          // Temporarily paused
  EXPIRED         // Contract expired
  TERMINATED      // Ended early
  REJECTED        // Rejected by university
}

enum PartnershipPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PartnershipType {
  INTERNSHIP_PROGRAM
  FULL_TIME_RECRUITMENT
  CO_OP_PROGRAM
  RESEARCH_COLLABORATION
  GUEST_LECTURES
  SCHOLARSHIP_PROGRAM
  EQUIPMENT_DONATION
  MENTORSHIP_PROGRAM
  CAREER_SERVICES
  PROJECT_BASED
  CONSULTING
  STARTUP_INCUBATION
}

enum StudentYear {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
  GRADUATE
  PHD
  POST_DOC
}

enum CampusEventType {
  CAREER_FAIR
  INFO_SESSION
  NETWORKING_EVENT
  TECH_TALK
  WORKSHOP
  HACKATHON
  INTERVIEW_DAY
  COMPANY_PRESENTATION
  PANEL_DISCUSSION
  MOCK_INTERVIEWS
  RESUME_REVIEW
  INDUSTRY_MIXER
  STARTUP_PITCH
  RESEARCH_SYMPOSIUM
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}
