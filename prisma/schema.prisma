generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserRole {
  ADMIN
  STUDENT
  PROFESSOR
  ALUMNI
  EMPLOYER
  MENTOR
  UNIVERSITY_STAFF
  OTHER
  SUPER_ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id             String           @id @default(uuid())
  email           String           @unique
  password        String
  universityId    String?  @unique
  studentId       String?  @unique  // Student ID for verification
  isVerified      Boolean          @default(false)
  accountStatus   AccountStatus    @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLogin       DateTime?
  role            UserRole         @default(STUDENT)
  firstName       String
  lastName        String
 phoneNumber     String? @unique
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  dateOfBirth     DateTime?
  gender          Gender? @default(OTHER)
  nationality     String?
  languages       String[]
  skills          Skill[]
  interests       String[]
  gpa             Float?           // GPA for filtering
  graduationYear  Int?             // Graduation year for filtering
  availability    String?          // Job availability status
  university      String?          // University name
  major           String?          // Major for filtering
  // profile         Profile?
  posts           Post[]
  events          Event[]
  deletedAt       DateTime? 
  jobApplications JobApplication[]
  messages        Message[]
  companies       Company[]
  postedJobs      Job[]            @relation("PostedJobs")
  notifications   Notification[]
  eventRegistrations EventRegistration[]
  chats              Chat[]
  comments          Comment[]
  education         Education[]
  experiences       Experience[]
  resume            String?
  headline          String?
  bio               String?
  avatar            String?
  socialLinks       Json?
  visibility        Visibility   @default(PUBLIC)
  isPublic          Boolean      @default(true)
  
  // ChatGroup relations
  ownedGroups       ChatGroup[]  @relation("GroupOwner")
  groupMemberships  ChatGroup[]  @relation("GroupMembers")
  groupMessages     GroupMessage[]

  // Enhanced Auth relations
  userSessions      UserSession[]
  twoFactorAuth     TwoFactorAuth?
  backupCodes       BackupCode[]
  securityLogs      SecurityLog[]
  trustedDevices    TrustedDevice[]
  jobRecommendations JobRecommendation[]
  // Document uploads
  documents         Document[]
}
model JobRecommendation {
  id        String   @id @default(uuid())
  userId    String
  jobId     String
  score     Float    // AI confidence score (0-1)
  reasons   Json?    // JSON array of matching reasons
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
  
  @@unique([userId, jobId])
}
// Enhanced Authentication Models
model VerificationCode {
  id        String   @id @default(uuid())
  email     String
  code      String
  type      String   // 'email_verification', 'password_reset', 'two_factor', 'account_reactivation'
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([email, type])
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String?  @unique
  deviceName   String?
  deviceId     String?
  ipAddress    String?
  userAgent    String?
  location     String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  expiresAt    DateTime?

  @@index([userId])
}

model TwoFactorAuth {
  id          String  @id @default(uuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret      String  // TOTP secret
  isConfirmed Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BackupCode {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String   // Hashed backup code
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}

model AccountLockout {
  id                String    @id @default(uuid())
  email             String    @unique
  failedAttempts    Int       @default(0)
  lastFailedAttempt DateTime?
  lockedUntil       DateTime?
  ipAddress         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model SecurityLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     String   // 'LOGIN_SUCCESS', 'LOGIN_FAILED', 'PASSWORD_CHANGED', etc.
  ipAddress String?
  userAgent String?
  metadata  Json?    // Additional event data
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
  @@index([event, timestamp])
}

model TrustedDevice {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId    String   @unique
  deviceName  String
  deviceType  String   // 'mobile', 'desktop', 'tablet'
  fingerprint String   // Device fingerprint hash
  isActive    Boolean  @default(true)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([userId])
}

model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  password  String   // Hashed password
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model LoginAttempt {
  id         String   @id @default(uuid())
  email      String
  ipAddress  String?
  userAgent  String?
  success    Boolean
  failReason String?  // Reason for failure if unsuccessful
  timestamp  DateTime @default(now())

  @@index([email, timestamp])
  @@index([ipAddress, timestamp])
}



model Education {
  id          String   @id @default(uuid())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  activities  String[]
  user     User  @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Experience {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  location    String
  skills      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user     User  @relation(fields: [userId], references: [id])
  userId   String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  deletedAt DateTime?
}

model Skill {
  id          String   @id @default(uuid())
  name        String
  endorsements Int?
  user     User  @relation(fields: [userId], references: [id])
  userId   String
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          String         @id @default(uuid())
  name        String
  description String
  logo        String?
  website     String?
  industry    String
  size        String
  location    String
  isVerified  Boolean        @default(false)
  owner       User           @relation(fields: [ownerId], references: [id])
  ownerId     String
  jobs        Job[]
  experiences Experience[]
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id                  String            @id @default(uuid())
  title              String
  description        String
  requirements       String[]
  type              String
  location          String
  salary            Json
  applicationDeadline DateTime
  status            JobStatus          @default(ACTIVE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         String
  postedBy          User               @relation("PostedJobs", fields: [postedById], references: [id])
  postedById        String
  applications      JobApplication[]
  deletedAt DateTime?
  jobRecommendations JobRecommendation[]
}

model JobApplication {
  id          String            @id @default(uuid())
  resumeUrl   String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  feedback    String?
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  job         Job               @relation(fields: [jobId], references: [id])
  jobId       String
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  deletedAt DateTime?
  createdAt DateTime @default(now())
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String
  tags        String[]
  attachments String[]
  likes       Int        @default(0)
  views       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  forum       Forum      @relation(fields: [forumId], references: [id])
  forumId     String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  comments    Comment[]
  deletedAt DateTime?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user User @relation(fields: [userId], references: [id])
  userId String
  deletedAt DateTime?

}

model Forum {
  id          String   @id @default(uuid())
  name        String
  description String
  category    String
  moderators  String[]
  posts       Post[]
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                   String             @id @default(uuid())
  title               String
  description         String
  type               String
  startDate          DateTime
  endDate            DateTime
  location           String
  mode               EventMode
  capacity           Int
  registrationDeadline DateTime
  status             EventStatus         @default(UPCOMING)
  creator            User                @relation(fields: [creatorId], references: [id])
  creatorId          String
  registrations      EventRegistration[]
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventRegistration {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  updatedAt DateTime @updatedAt
  User User[]
}

model Chat {
  id           String    @id @default(uuid())
  type         String
  participants String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  deletedAt DateTime?
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  deletedAt DateTime?
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      String
  priority  String?  @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  link      String?
  metadata  Json?    // Additional data for the notification
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  deletedAt DateTime?
  updatedAt DateTime @updatedAt
  
  @@index([userId, read])
  @@index([userId, type])
  @@index([createdAt])
}
model ChatGroup {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isActive    Boolean        @default(true)
  
  // Relations
  members     User[]         @relation("GroupMembers")
  owner       User           @relation("GroupOwner", fields: [ownerId], references: [id])
  ownerId     String
  messages    GroupMessage[]
  deletedAt   DateTime?
}

model GroupMessage {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isEdited  Boolean   @default(false)
  
  // Relations
  group     ChatGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  sender    User      @relation(fields: [senderId], references: [id])
  senderId  String
  deletedAt DateTime?
}

enum Visibility {
  PUBLIC
  PRIVATE
  CONNECTIONS
}

enum JobStatus {
  ACTIVE
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum EventMode {
  ONLINE
  OFFLINE
  HYBRID
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

model Document {
  id                  String             @id @default(uuid())
  userId              String
  documentType        DocumentType
  originalName        String
  cloudinaryPublicId  String
  cloudinaryUrl       String
  fileSize            Int
  mimeType            String
  uploadedAt          DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  isVerified          Boolean            @default(false)
  verificationStatus  VerificationStatus @default(PENDING)
  verificationNotes   String?
  verifiedAt          DateTime?
  verifiedBy          String?
  deletedAt           DateTime?
  createdAt           DateTime           @default(now())
  // Relations
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([documentType])
  @@index([verificationStatus])
}

enum DocumentType {
  RESUME
  DEGREE_CERTIFICATE
  TRANSCRIPT
  ID_DOCUMENT
  BUSINESS_LICENSE
  COMPANY_REGISTRATION
  PORTFOLIO
  COVER_LETTER
  RECOMMENDATION_LETTER
  COMPANY_LOGO
  PROFILE_PICTURE
  OTHER
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_RESUBMISSION
}
